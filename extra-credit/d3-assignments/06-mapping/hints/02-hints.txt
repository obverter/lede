






Build a CSV named flights.csv from http://nonstopfrom.com/new-york-jfk/ with the column names 'airport,code,airlines'













Use your text editor + regular expressions











Okay, okay, fine, this is a viz class, I guess?

1. Open up the page
2. Select everything under the "International non stop flights from New York may fly to:" heading
3. Copy and paste into a new file
4. Find and Replace. Search for: `(.*) – (.*) – (.*)` and replace with `"\1","\2","\3"` (but without the backticks - that's just for markdown to not freak out) - if you're using a text editor that isn't Sublime, it might be `"$1","$2","$3"` instead















You can cut and paste almost all of the first file, just change the projection and read in flights instead of lines

















To give the globe a background color or a stroke, you need to add the globe itself as a geojson layer. Fortunately the globe is just

    { type: 'Sphere' }

Which means you can add it in one simple statement!

    svg.append('path')  
      .datum({type: 'Sphere'})
      .attr('d', path)

You can also use this for any other projection, too, even if it isn't a 3d globe.

















You can use numbers smaller than 1 for stroke-width






























If you'd like to do this on your own at some point for some other city, here's what I did to get the lat/lon codes...

Step 1: Download a 6mb airport codes file from https://github.com/datasets/airport-codes/blob/master/data/airport-codes.csv
Step 2: Run some code

    # Read in our files
    flights = pd.read_csv("flights.csv")
    codes = pd.read_csv("airport-codes.csv")

    # Create lat/lon columns
    codes[['longitude', 'latitude']] = codes.coordinates.str.extract('(.*), (.*)')
    codes.drop(columns=['coordinates'], inplace=True)

    # Keep the ones for our flights
    subset = codes[codes.iata_code.isin(flights.code)]

    # Clean up closed and duplicated airports
    subset = subset[subset.type != 'closed']
    subset.drop_duplicates(subset='iata_code', inplace=True)

    # Save
    subset.to_csv("airport-codes-subset.csv", index=False)














Draw your airports first - you'll want to use transform/translate to move your circles around
















How do you convert lat/lon to pixel coordinates?
















As always, be careful with your column names for latitude and longitude

















When you're drawing your flight paths, you'll need to build some custom geojson. It looks like this:


    {
      type: 'LineString',
      coordinates: [[lng1, lat1], [lng2, lat2]]
    }











To get the lat/lon of the destination airports, you'll need to use a d3.map(). It has NOTHING to do with mapping, and is a thing we didn't do in class! It's basically a dictionary.

    // You build a d3.map()
    const dataStore = d3.map()

    // You can set values
    dataStore.set('Name', 'Soma')

    // You can get values
    dataStore.get('Name')
    -> Soma

You use them a lot to associate a CSV with data from something else. The way you use it in this situation is to build a d3.map() of all the cities and their coordinates. Let's say we were had a topojson file of states, but also a CSV file of voting data

    // Build a new place to keep all the vote data
    const voteStore = d3.map()

Copy our datapoints into a dictionary.

    voteDatapoints.forEach(function(d) {
        voteStore.set(d.state_name, d)
    })

We started off with

[ { state_name: 'Idaho', population: 20, votes: 3}, { state_name: 'Virginia', population: 40, votes: 4}]

and then end up with

 {
    'Idaho': { state_name: 'Idaho', population: 20, votes: 3},
    'Virginia': { state_name: 'Virginia', population: 40, votes: 4}
 }

Why is this helpful??? Well, if we're somewhere that we don't have the datapoint but know the state's name, we can get the datapoint!

    // Add a state path for every state feature from our JSON
    svg.selectAll('path')
        .data(states.features)
        .enter().append('path')
        .attr('d', path)
        .attr('fill', function(d) {
            // But how do we get the 'votes' column from the CSV?
            // we can't use d.properties.votes because this is the JSON not the CSV!
            // maybe the JSON only knows the name of the state in d.properties.name
        })

You just say hey, use the voteStore and get the CSV datapoint based on the state name

        .attr('fill', function(d) {
            // Get the csv datapoint
            csv_d = voteStore.get(d.properties.name)
            // then use the data
            return colorScale(d.votes)
        })

Yours isn't going to look exactly like that, but when you get to a point where you're like "i know this place's name (or... iata code) but not its coordinates" that's what you'll be doing.




If your mapping isn't working right, take a look at the coordinates you're storing. Did you pick the right column names? Are you putting them in the right order?